// npm create vite@latest client
// React --> j.script + swc
// cd client
// npm i
// npm install -D tailwindcss postcss autoprefixer
// npx tailwindcss init -p (then we got post css and tailwind config css )
// delete the app css in src and public in vite
// inside asset delete the React
// and inside app.jsx delete whole things in it and write rfc
// instal extension ES7+ React/Redux/React-Native snippets
// also install auto rename tag.console ninja,GitHub Capilot,GitHub Capilot chat and Tailwind CSS IntelliSense 
// git init 
// now creating pages and routes
// inside rsc create folder called pages and inside page create file called about.jsx
// inside write rfc(react functional component) 
// create Home,sigIn,SingOut,Profile and Home File and write each of one RFC 
// package React Router Dom
// npm i react-router-dom
// create header component 
// span  wa sections
// npm i react-icons for mobile and screen w-24 sm:w-64
// menu list ul and inside li
// create folder api in the terminal run the backage in the center whole of back end and front end
// cd ..
// npm init -y
// incdex.js in api and instal npm i express
// node api/index.js and in package.lock write the  "main": "index.js",
//  ("type": "module",)
//  note (restart the server eacj time you do some changes) so to not do that install npm i nodemon
//  connect to database npm i mongoose then .env
//  npm i dotenv (intan so socota wa initialize )dotenv.config();
// create user model in api creater folder and name it models
// adding timeStamp true which is going to tell mongodb to record two important extra
// information one is creation and the other is update below is Shema  username: type: String, required:true,
// create a test api route(this is e.g of route 
// app.get('/test',(req,res) => {
//     res.send('Hello World!');
// }
// );)
// http://localhost:500/api/user/test
// create sign up api route create file authenRoute
// if see undefined use this in idex app.use(express.json());
// this message will appear Server is running on port 500!
// Conected to MongoDB    
// { username: 'test', email: 'test@gmail.com', password: 'haldh' }  when to save inside database do it like this inside authenController.js it was like this before export const signup = (req, res) => {
//  console.log(req.body);
// }; change it to import User from '../model/userModel.js';
// export const signup = async (req, res) => {
//  const { username,email,password } = req.body;
//  const newUser = new User ({ username, email, password});
//  await newUser.save();
//  res.status(201).json ('User created successfully!');
// }; and 
// install npm i bcryptjs
// salt is just a hash number of variable
// the way to make password hide is installing npm install 
// create inside index.js a middleware and a fucntion to handle possible errors
// complete sign up page UI
// complete sign up functionality
// api is backend and cleint is front end
// create sign in API route
// npm i jsonwebtoken
// complete 
// complete sign in page functionality
// Add redux toolkit (so we can have access to the user data in different places in
//our application)// install inside the client side and 
// inside rct create folder callled redux and inside it's create file called store.js


//application for deployment is versatile